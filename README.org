[[http://melpa.org/#/git-commit-insert-issue][file:http://melpa.org/packages/git-commit-insert-issue-badge.svg]]

* Search and insert the right issue at "Fixes #"

Goal: In a magit commit buffer, I want to complete the issue when I type
"Fixes #".

For Github, Gitlab and Bitbucket.

Works with *individual projects*  (repo of type username/projectname),
*groups* (groupname/projectname) and *forks*  (where the issues are on
the original repo).

Bitbucket: works with *private projects*. Install [[https://github.com/tjaartvdwalt/bitbucket.el/][bitbucket.el]] (in melpa).


#+BEGIN_HTML
 <img src="https://gitlab.com/emacs-stuff/git-commit-insert-issue/raw/master/img.png" </img>
#+END_HTML
# https://cloud.githubusercontent.com/assets/5016978/6471672/e36e8c00-c1a1-11e4-91a1-dd5481d57c36.png

** Usage
Activate the minor mode
: M-x git-commit-insert-issue-mode

In a magit  commit buffer (=git-commit-mode=), type "Fixes  #" (or [[https://help.github.com/articles/closing-issues-via-commit-messages/][any
other keyword understood by github]], or just a "#" for Gitlab) and choose
the issue from the list.

So to always activate it:
: (add-hook 'git-commit-mode-hook 'git-commit-insert-issue-mode)

You can also call it with
: M-x git-commit-insert-issue-ask-issues

and programmatically doing something like
#+BEGIN_SRC emacs-lisp
(--map (insert (concat it "\n"))
       (git-commit-insert-issue-github-issues-format "inkel" "github-issues.el"))
#+END_SRC

*** Connect to your Bitbucket account

See [[https://github.com/tjaartvdwalt/bitbucket.el/#authentication][its README]], but shortly it boils down to

#+BEGIN_SRC emacs-lisp
(setq bitbucket-basic-auth "my-basic-auth-token")
#+END_SRC

or

#+BEGIN_SRC shell
export BITBUCKET_BASIC_AUTH=my-basic-auth-token
#+END_SRC

*** Working with many remotes (and one issues source)

    The first remote in your =.git/config=  will be the one we get the
    issues from.

    A  project may  have many  remote git  urls: the  upstream one  on
    Github, your fork and a copy  on Gitlab, or maybe the original one
    in a self-hosted Gitlab instance and a mirror on Github. Where are
    the issues then ?  Git itself can  not tell us, so we decide we'll
    go with  the first  remote url in  your =.git/config=.   Just edit
    this file manually to set it right.


*** Plug with ido (ivy or helm work out of the box)

The code uses the default =completing-read= function to interactively
ask for the issue. If =ivy= or =helm= are activated, they will pick it up
and you have nothing to do.

However ido-mode doesn't (strangely). So we can set the
completing-read function to use it:

: (setf git-commit-insert-issue--completing-fun #'ido-completing-read)


** Installation

This package is in [[http://wikemacs.org/wiki/MELPA][MELPA]], so you can install it with [[http://wikemacs.org/wiki/Package.el][package.el]]:

: M-x package-install RET git-commit-insert-issue RET

(you may need a =M-x package-refresh-contents=).

Alternatively, you can download this  repo and call =M-x load-file= on the
elisp source.

*** Dependencies

- ghub (which also provides glab and is for Emacs 25+)
- projectile
- s.el

They are all in MELPA.

** Issues

- if you play too much with it, you can reach github's rate limit.

[[https://github.com/inkel/github-issues.el/issues][Issues for github integration of github-issues.el]] :

# export: both uses an org table with many columns. Eval with C-c-c or
# execute the line with C-x-e
#+BEGIN_SRC emacs-lisp
(--map (insert (concat it "\n")) (git-commit-insert-issue-github-issues-format "inkel" "github-issues.el"))
#10 - Why not just use the gh package?
#1 - Doesn't work on private repos.
#+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
;;(issues-get-issues "inkel" "github-issues.el")
#+END_SRC


** Todo

- [ ] tests
- [ ] cache
- [X] gitlab integration:
  - [X] Get opened issues from gitlab
  - [X] Get a list of strings with "id - title"
  - [X] choose with ido and insert in buffer: =M-x git-commit-insert-issue-gitlab-insert=.
  - [X] choose github or gitlab, depending on project.
    - [X] get the remote server in git config
  - [X]  make it work for  projects in groups (i.e,  "emacs-stuff/project" and
    not "vindarel".
    - [X] get the group name in git config
  - [±] error handling (bad project name, etc)

** Ko-fi & Liberapay

You use this daily ? You feel like pushing me to un-rot the code ? You
can offer me a beer :]

https://liberapay.com/vindarel/

https://ko-fi.com/vindarel

Thank you <3

(why? I'm working towards independance with free software projects now
so I must practice in asking for support…)

**  Changelog

*** v0.4 (December, 2020)

- replaced deprecated =github-issues= by =ghub=. That makes Emacs 25+
  a requirement.
- fixed Gitlab for public repositories.

*** v0.3.2

    - added the variable =git-commit-insert-issue--completing-fun=, so
      we can set it to =ido-completing-read=. Ivy and Helm work out of
      the box. <2020-10-08 Thu>
    - remove  the harcoded  =ido-completing-read=  and  make room  for
      ivy. <2017-11-01 mer.>

*** v0.3 <2017-04-24 lun.>

    - Add Bitbucket support (Tjaart van der Walt)

*** v0.2

    - Gitlab support: private and public, individual, groups or forks.
      We  then consider  the project  url  and username  of the  first
      remote to appear in the user's =.git/config=.
    - ido (with \n) instead of helm
    - auto gitlab login
    - more error handling
    - github-issues dependency in melpa

*** v0.1 - release on Melpa

    - Github only
